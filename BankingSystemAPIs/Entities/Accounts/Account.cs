using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using BankingSystemAPIs.Exceptions;
using Microsoft.EntityFrameworkCore;
using BankingSystemAPIs.Entities.AcountsTransactions;
using BankingSystemAPIs.Entities.User;
using BankingSystemAPIs.Entities.Rates;

namespace BankingSystemAPIs.Entities.Accounts
{
    // The Account class represents a bank account for a client.
    // It contains properties for balance, account number, and currency, and includes methods for deposit, withdrawal, and transfer operations.
    [Index(nameof(AccountNumber), IsUnique = true)] // Ensures the AccountNumber is unique in the database
    public abstract class Account
    {
        // Unique identifier for the account
        [System.ComponentModel.DataAnnotations.Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)] // Automatically generated by the database
        public Guid Id { get; set; }

        // Account number, unique for each account
        [Required] // Ensures the account number is required
        public int AccountNumber { get; set; }

        // The balance of the account
        [Required] // Ensures the balance is required
        public decimal Balance { get; set; }

        // RowVersion is used for optimistic concurrency control
        [Timestamp] // Used for concurrency checking
        public byte[]? RowVersion { get; set; } = null!;

        // Currency of the account
        [Required]
        public Guid RateId { get; set; }

        // Foreign key to the Rate table representing the exchange rate for the currency
        [ForeignKey("RateId")]
        public Rate Rate { get; set; } = null!;

        // Foreign key to the Client who owns this account
        [Required]
        public Guid ClientId { get; set; }

        // Navigation property to access the account transactions (e.g., deposits, withdrawals)
        public List<AcountsTransactions.AccountTransaction> AccountsTransactions { get; } = [];

        // Navigation property to access the Client who owns this account
        public Client Client { get; set; } = null!;


        // Lock object for thread safety in deposit/withdraw methods
        private readonly object _lock = new object();

        // Default constructor
        public Account() { }

        // Constructor to initialize account with specific balance, account number, client ID, and currency
        public Account(decimal balance, int accountNumber, Guid clientId, Guid rateId)
        {
            if (balance < 0)
                throw new NotPositiveException("Initial balance cannot be negative.");
            Balance = balance;
            AccountNumber = accountNumber;
            ClientId = clientId;
            RateId = rateId;
        }

        // Method to get the current balance of the account
        public decimal GetBalance()
        {
            return Balance;
        }

        // Method to deposit a specified amount into the account
        public void Deposit(decimal amount)
        {
            lock (_lock) // Locking to prevent race conditions during deposit
            {
                if (amount <= 0)
                    throw new NotPositiveException("Deposit amount must be positive.");
                Balance += amount; // Add the amount to the balance
            }
        }

        // Method to withdraw a specified amount from the account
        public virtual void Withdraw(decimal amount)
        {
            lock (_lock) // Locking to prevent race conditions during withdrawal
            {
                if (amount <= 0)
                    throw new NotPositiveException("Withdraw amount must be positive.");
                if (amount <= Balance)
                {
                    Balance -= amount; // Deduct the amount from the balance
                    return;
                }
                throw new InsufficientFundsException("Insufficient Funds"); // Throw exception if funds are insufficient
            }
        }

        // Method to transfer a specified amount to another account
        public virtual void Transfer(Account account, decimal amount, decimal senderRate, decimal receiverRate)
        {
            Withdraw(amount); // Withdraw from the sender account
            decimal transferAmount = amount / senderRate * receiverRate; // Convert currency if needed
            account.Deposit(transferAmount); // Deposit into the receiver account
        }

        // Override ToString method to provide a custom string representation of the account
        public override string ToString()
        {
            return $"id : {Id},  balance : {Balance}";
        }
    }
}
