// <auto-generated />
using System;
using BankingSystemAPIs.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankingSystemAPIs.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241223002209_Initail")]
    partial class Initail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankingSystemAPIs.Entities.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("integer");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("Account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<string>("TransactionType").HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Accounts.CheckingAccount", b =>
                {
                    b.HasBaseType("BankingSystemAPIs.Entities.Accounts.Account");

                    b.Property<decimal>("Overdraft")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("CheckingAccount");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Accounts.SavingsAccount", b =>
                {
                    b.HasBaseType("BankingSystemAPIs.Entities.Accounts.Account");

                    b.Property<decimal>("Interest")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("SavingsAccount");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Deposit", b =>
                {
                    b.HasBaseType("BankingSystemAPIs.Entities.Transactions.Transaction");

                    b.HasDiscriminator().HasValue("Deposit");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Transfer", b =>
                {
                    b.HasBaseType("BankingSystemAPIs.Entities.Transactions.Transaction");

                    b.Property<Guid>("TargetAccountId")
                        .HasColumnType("uuid");

                    b.HasIndex("TargetAccountId");

                    b.HasDiscriminator().HasValue("Transfer");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Withdraw", b =>
                {
                    b.HasBaseType("BankingSystemAPIs.Entities.Transactions.Transaction");

                    b.HasDiscriminator().HasValue("Withdraw");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Accounts.Account", b =>
                {
                    b.HasOne("BankingSystemAPIs.Entities.User.User", null)
                        .WithMany("Accounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Transaction", b =>
                {
                    b.HasOne("BankingSystemAPIs.Entities.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.Transactions.Transfer", b =>
                {
                    b.HasOne("BankingSystemAPIs.Entities.Accounts.Account", "TargetAccount")
                        .WithMany()
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TargetAccount");
                });

            modelBuilder.Entity("BankingSystemAPIs.Entities.User.User", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
